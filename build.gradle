//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrUnresolvedAccess
import java.nio.file.Files
import java.time.LocalDateTime

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.+'
}

def buildLicensePath = file("build/LICENSE").toPath()
Files.createDirectories(buildLicensePath.getParent())
try(def bw = Files.newBufferedWriter(buildLicensePath)
def br = Files.newBufferedReader(file("LICENSE").toPath())) {
    for (final def line in br.readLines()) {
        bw.writeLine(line
                .replace("<year>", String.valueOf(LocalDateTime.now().year + 3))
                .replace("<name of author>", mod_authors))

    }
}// license auto generation years and authors

def modid = mod_id
version = mod_version
group = "org.polaris2023.${mod_id}"

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')



runs {
    configureEach {
        setSystemProperties(Map.of(
                'forge.logging.markers', 'REGISTRIES',
                'forge.logging.console.level', 'debug'
        ))

        modSources project.sourceSets.main
    }

    client {
        setWorkingDirectory(project.file('run/client'))
        setSystemProperties(Map.of(
                'forge.enabledGameTestNamespaces', modid
        ))
    }

    server {
        setWorkingDirectory(project.file('run/server'))
        setSystemProperties(Map.of(
                'forge.enabledGameTestNamespaces', modid
        ))
    }

    gameTestServer {
        setWorkingDirectory(project.file('run/testServer'))
        setSystemProperties(Map.of(
                'forge.enabledGameTestNamespaces', modid
        ))
    }

    data {
        setWorkingDirectory(project.file('run/data'))
        getArguments().addAll '--mod', mod_id as String, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "ParchmentMC"
        url = "https://maven.parchmentmc.org/"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    compileOnly(project(":annotation"))
    annotationProcessor(project(":processor"))
    //compileOnly("mezz.jei:jei-${jei_mc_version}-neoforge:${jei_version}")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    exclude(".cache")
}

jar {
    from("readme") {
        into("readme")//settings
    }
    from("README.md")
    from("build/LICENSE")// gen authors license

}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}